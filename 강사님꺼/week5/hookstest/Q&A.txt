Q1. 리액트를 사용하는 이유를 설명해보세요 (2가지 이상)
    - 컴포넌트 단위의 개발이 가능하다. (개발을 쪼개서 할 수 있다.)
    - 가상돔을 사용하여서 불필요한 렌더링 과정을 최소화해준다.
    

Q2. (Q1)을 통해 얻을 수 있는 장점은 무엇일까요?
    - 컴포넌트를 재사용 할 수 있다.


Q3. 리액트가 가상 돔을 사용하는 이유는 무엇일까요?
    - 불필요한 렌더링 과정을 최소화해준다.
    - 빠른속도

Q4. 리액트가 가상 돔과 돔 트리를 비교하여 바뀐 부분이 있다면 화면을 다시 그리는 행위를 무엇이라 할까요?
    - reconciliation (재조정)


Q5. (Q3)의 행위를 통해 얻을 수 있는 이점은 무엇일까요?
    - 웹사이트 랜더링이 빨라진다.


Q6. (Q4)은 리액트에서 어느 순간에 실현될까요?
    - 구성 요소의 상태 또는 소품이 변경되면 React에서 조정이 실현됩니다.
     컴포넌트가 업데이트되면 React는 새로운 가상 DOM 트리를 생성하고 이전 버전과 비교합니다.
     두 개의 가상 DOM 트리 간에 차이가 있는 경우 React는 필요한 변경 사항을 실제 DOM에 적용합니다.
     가상 및 실제 DOM을 비교하고 업데이트하는 이 프로세스를 조정이라고 합니다.

    - 상위 구성 요소가 다시 렌더링되어 모든 하위 구성 요소도 다시 렌더링될 때 조정이 발생할 수도 있습니다. 
    이 경우 React는 부모 구성 요소의 새 가상 DOM 트리를 이전 버전과 비교하고 필요에 따라 실제 DOM을 업데이트합니다.

Q7. 훅 함수는 왜 만들게 되었을까요?
    아래의 훅 함수는 각 언제 선언되어야 할까요?
    (1) useState
    - useState 후크는 구성 요소가 상태를 관리해야 할 때마다 사용해야 합니다. 
        조건문이나 루프 전에 구성 요소 본문의 최상위 수준에서 선언해야 합니다.
    (2) useRef
    - useState 후크는 구성 요소가 상태를 관리해야 할 때마다 사용해야 합니다. 
        조건문이나 루프 전에 구성 요소 본문의 최상위 수준에서 선언해야 합니다.
    (3) useEffect
    - useEffect 후크는 데이터 가져오기 또는 DOM 업데이트와 같은 부작용을 관리하는 데 사용해야 합니다. 
        모든 state 및 ref 변수를 선언한 후 구성 요소 본문의 최상위 수준에서 선언해야 합니다.
    (4) useCallback
    - useCallback 후크는 종속성이 변경될 때만 다시 렌더링되도록 함수를 메모화하는 데 사용해야 합니다. 
        조건문이나 루프 전에 구성 요소 본문의 최상위 수준에서 선언해야 합니다.
    (5) useMemo
    - useMemo 후크는 의존성이 변경될 때만 다시 계산되도록 값을 메모하는 데 사용해야 합니다. 
        조건문이나 루프 전에 구성 요소 본문의 최상위 수준에서 선언해야 합니다.

Q8. 커스텀 훅을 제작하면서 얻을 수 있는 이점은 무엇이고 어느 때 만들어야 할까요?
    - 재사용이 가능한 로직을 더욱 편하게 관리하기 위해서 코드의 양이 많을 때 사용하여 코드를 분배한다.
    - 전반적으로 사용자 지정 후크는 더 깨끗하고 모듈식이며 유지 관리하기 쉬운 React 코드를 작성하는 데 도움이 되는 강력한 도구


Q9. 리액트로 프로젝트를 만들려고할 때 고려해야하는 사항들을 아는대로 작성해보세요 (3가지 이상)
    -프로젝트 구조
    명확하고 논리적인 방식으로 프로젝트를 구성하는 것은 유지 관리성과 확장성을 위해 중요합니다. 
    구성 요소, 스타일 및 기타 자산을 분리하는 폴더 구조를 사용하는 것이 좋습니다.
    
    -코드 분할
    대규모 React 애플리케이션을 사용하는 경우 코드가 성능에 최적화되어 있는지 확인하려고 합니다.
    코드 분할은 필요에 따라 로드할 수 있는 더 작은 청크로 코드를 분할하여 초기 로드 시간을 줄이는 데 도움이 될 수 있습니다.

    -CSS
    인라인 스타일에서 CSS 모듈에 이르기까지 React에서 스타일을 처리하는 방법에는 여러 가지가 있습니다. 
    프로젝트와 팀에 적합한 방법을 선택하십시오.

Q10. 만약 위의 질문에 모두 답을 했다면, 현재 부족한 것은 리액트가 아닌 자바스크립트 일 수 있습니다
    이전 풀어보았던 자바스크립트 API 문제 1~4와 board 문제를 현재 풀이할 수 있는지 확인해보세요
    
    react로 풀이를 한다고 가정했을 때와 (직접 바꿔보지는 말 것, 예제 문제와 유사)
    vanilla js(java script)로 풀이한다고 하였때 와의 차이점은 무엇일까요?

    * 위 문제를 받지 못한 수강생은 메일 전송 시 따로 첨부하여 송부

    - 리액트는 재사용성, 모듈성 및 성능에 중점적이다
    - JS는 유연성과 제어기능을 제공하지만 어플이 커질수록 유지보수가 어렵다.


Q11. 리액트에서 컴포넌트를 나누는 기준은 어떻게 되어야할까요?
     또한, 이러한 관점은 개발자마다 다를 수 있는데 왜 그럴까요?

     - 재사용성, 성능마다 다르게
     - 개발자마다 생각이 다르고 어떻게 사용해야하는지 생각하는 방향이 다르기 때문에.
     
